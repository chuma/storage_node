// Generated by CoffeeScript 1.3.3
(function() {
  var accessor, search, utils;

  utils = require('utils');

  search = require('./search');

  accessor = {
    find: function(set, options, callback) {
      var c, found, len;
      found = {};
      search.setOptions(options);
      len = utils.noe(set);
      c = 0;
      return utils.processObject(set, function(ob, k) {
        if (utils.isObject(ob)) {
          if (search.matches(ob)) {
            found[k] = utils.clone(ob);
            found[k].id = k;
          }
        } else {
          len--;
          c--;
        }
        if (++c === len) {
          if (utils.noe(found) === 0) {
            found = null;
          } else if (utils.noe(found) === 1) {
            found = utils.firstEl(found);
          }
          return callback(found);
        }
      });
    },
    modify: function(set, options, ob, callback) {
      return this.find(set, options, function(found) {
        var k, l;
        if (found.id) {
          for (k in ob) {
            set[id][k] = ob[k];
          }
        } else {
          for (k in found) {
            for (l in ob) {
              set[k][l] = ob[l];
            }
          }
        }
        return callback(found);
      });
    },
    remove: function(set, options, callback) {
      return this.find(set, options, function(found) {
        var k;
        if (found.id) {
          delete set[found.id];
        } else {
          for (k in found) {
            delete set[k];
          }
        }
        return callback(found);
      });
    },
    all: function(set) {
      var found, k;
      found = {};
      for (k in set) {
        if (!utils.isObject(set[k])) {
          continue;
        }
        found[k] = utils.clone(set[k]);
        found[k].id = k;
      }
      if (utils.noe(found) === 0) {
        found = null;
      }
      return found;
    },
    clear: function(set) {
      var found, k;
      found = {};
      for (k in set) {
        if (!utils.isObject(set[k])) {
          continue;
        }
        found[k] = utils.clone(set[k]);
        found[k].id = k;
        delete set[k];
      }
      if (utils.noe(found) === 0) {
        found = null;
      }
      return found;
    }
  };

  module.exports = accessor;

}).call(this);
